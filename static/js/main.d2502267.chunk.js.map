{"version":3,"sources":["actions/setSettings.js","actions/reset.js","components/SettingsForm.js","components/FlavourInfo.js","components/OrderInfo.js","actions/setPerson.js","components/PersonForm.js","actions/setSlices.js","components/Flavour.js","actions/confirmOrder.js","components/PersonOrder.js","components/PersonStepper.js","App.js","reducers/settingsReducer.js","reducers/orderReducer.js","reducers/personReducer.js","reducers/rootReducer.js","index.js"],"names":["data","type","payload","SettingsForm","setPeople","e","setState","numberOfPeople","target","value","setSlices","slices","numberOfSlices","setFlavours","numberOfFlavours","setSliceRequests","numberOfSliceRequests","storeSettings","preventDefault","state","props","setSettings","handleReset","reset","Container","Form","onSubmit","this","Group","as","Row","Label","column","sm","Col","Control","onChange","placeholder","Button","variant","onClick","Component","connect","settings","dispatch","bindActionCreators","FlavourInfo","className","Card","bg","Header","index","Text","pizzaValue","slicesValue","OrderInfo","Number","flavourSliceCount","orderStore","slice","slicePerPizza","flavourList","map","Math","floor","key","totalSlices","personIndex","PersonForm","setName","name","setEmail","email","storePerson","setPerson","personStore","personReducer","operation","flavourIndex","Flavour","incrementSlice","checkInput","personSliceCount","decrementSlice","settingState","maxSlices","numberOfSlicesPerPizza","sliceData","newSliceDifference","getSliceDifference","newPicksRemaining","getPicksRemaining","console","log","sliceDiffernce","forEach","element","remainder","picksRemaining","progress","Body","Title","disabled","ProgressBar","now","PersonOrder","getFlavour","i","handleConfirmOrder","confirmOrder","yourProgress","push","PersonStepper","handleNext","activeStep","handleBack","getStep","personId","Typography","match","params","Stepper","Step","StepLabel","color","App","getDropDownItem","to","getDropDownList","dropDownList","Navbar","Brand","NavDropdown","title","id","exact","path","component","initSettings","initState","Array","fill","personOrderCheck","initPersonList","rootreducer","combineReducers","action","blankSettings","Object","assign","blankState","newState","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"0UAAe,WAACA,GACd,MAAO,CACLC,KAAM,cACNC,QAAS,CACPF,UCJS,aACb,MAAO,CACLC,KAAM,U,mDCMJE,E,YACJ,aAAe,IAAD,8BACZ,+CASFC,UAAY,SAACC,GACX,EAAKC,SAAS,CACZC,eAAgBF,EAAEG,OAAOC,SAZf,EAgBdC,UAAY,SAACL,GACX,IAAIM,EAASN,EAAEG,OAAOC,MAClBE,EAAS,KACXA,EAAS,IAGX,EAAKL,SAAS,CACZM,eAAgBD,KAvBN,EA2BdE,YAAc,SAACR,GACb,EAAKC,SAAS,CACZQ,iBAAkBT,EAAEG,OAAOC,SA7BjB,EAiCdM,iBAAmB,SAACV,GAClB,EAAKC,SAAS,CACZU,sBAAuBX,EAAEG,OAAOC,SAnCtB,EAuCdQ,cAAgB,SAACZ,GACfA,EAAEa,iBACF,IAAMlB,EAAO,EAAKmB,MAClB,EAAKC,MAAMC,YAAYrB,IA1CX,EA6CdsB,YAAc,SAACjB,GACb,EAAKe,MAAMG,QACX,EAAKjB,SAAS,CACZC,eAAgB,EAChBK,eAAgB,EAChBE,iBAAkB,EAClBE,sBAAuB,KAjDzB,EAAKG,MAAQ,CACXZ,eAAgB,EAChBK,eAAgB,EAChBE,iBAAkB,EAClBE,sBAAuB,GANb,E,sEAyDZ,OACE,kBAACQ,EAAA,EAAD,KACE,4BACA,wCACA,4BACA,kBAACC,EAAA,EAAD,CAAMC,SAAUC,KAAKV,eACnB,kBAACQ,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,sBACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAKvB,UAAWK,MAAOkB,KAAKR,MAAMZ,eAAgBN,KAAK,SAASoC,YAAY,6BAGxG,kBAACZ,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,gCACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAKjB,UAAWD,MAAOkB,KAAKR,MAAMP,eAAgBX,KAAK,SAASoC,YAAY,wCAGxG,kBAACZ,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,uBACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAKd,YAAaJ,MAAOkB,KAAKR,MAAML,iBAAkBb,KAAK,SAASoC,YAAY,+BAG5G,kBAACZ,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,yBACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAKZ,iBAAkBN,MAAOkB,KAAKR,MAAMH,sBAAuBf,KAAK,SAASoC,YAAY,iCAGtH,4BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASb,KAAKL,aAAvC,SACA,oCACA,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,UAAUtC,KAAK,UAA/B,WAEF,iC,GA7FmBwC,aAgHZC,mBAbf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,aAIpB,SAA4BC,GAC1B,OAAOC,YAAmB,CACxBxB,YAAaA,EACbE,MAAOA,GACNqB,KAGUF,CAA6CvC,G,SCpHtD2C,E,YACJ,aAAe,IAAD,8BACZ,+CACK3B,MAAQ,GAFD,E,sEAOZ,OACE,yBAAK4B,UAAU,YACb,kBAACC,EAAA,EAAD,CAAMC,GAAG,SACP,kBAACD,EAAA,EAAKE,OAAN,CAAarB,GAAG,MAAhB,WAA8BF,KAAKP,MAAM+B,MAAQ,GACjD,kBAACH,EAAA,EAAKI,KAAN,yBAA6BzB,KAAKP,MAAMiC,YACxC,kBAACL,EAAA,EAAKI,KAAN,yBAA6BzB,KAAKP,MAAMkC,cAE1C,iC,GAfkBb,aA2BXC,mBANf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,YAILD,CAAyBI,GC1BlCS,E,YACJ,aAAe,IAAD,8BACZ,+CACKpC,MAAQ,GAFD,E,sEAOZ,IAAML,EAAmB0C,OAAO7B,KAAKP,MAAMuB,SAAS7B,kBAAoB,EAClE2C,EAAqB9B,KAAKP,MAAMsC,WAAWD,kBAAmBE,MAAM,EAAG7C,GACvE8C,EAAgBJ,OAAO7B,KAAKP,MAAMuB,SAAS/B,gBAC3CiD,EAAcJ,EAAkBK,KAAI,SAAC9D,EAAMmD,GAC/C,IAAME,EAAaU,KAAKC,MAAMhE,EAAO4D,GAC/BN,EAActD,EAAO4D,EAC3B,OACE,kBAAC,EAAD,CACEP,WAAYA,EACZC,YAAaA,EACbH,MAAOA,EACPc,IAAKd,OAILe,EAAcvC,KAAKP,MAAMsC,WAAWQ,YAC1C,OACE,kBAAC1C,EAAA,EAAD,KACE,0CACA,kBAACwB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,OAAN,CAAarB,GAAG,MAAhB,iBAAoCqC,GACpC,4BACA,yBAAKnB,UAAU,8BACZc,GAEH,6BAEF,iC,GAnCgBpB,aAgDTC,mBAPf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,SAChBe,WAAYvC,EAAMuC,cAIPhB,CAAyBa,GCrDzB,WAACY,EAAanE,GAC3B,MAAO,CACLC,KAAM,YACNC,QAAS,CACPiE,cACAnE,UCEAoE,E,YACJ,aAAe,IAAD,8BACZ,+CAOFC,QAAU,SAAChE,GACT,EAAKC,SAAS,CACZgE,KAAMjE,EAAEG,OAAOC,SAVL,EAcd8D,SAAW,SAAClE,GACV,EAAKC,SAAS,CACZkE,MAAOnE,EAAEG,OAAOC,SAhBN,EAoBdgE,YAAc,SAACpE,GACbA,EAAEa,iBACF,IAAMlB,EAAO,EAAKmB,MACZgD,EAAc,EAAK/C,MAAM+C,YAC/B,EAAK/C,MAAMsD,UAAUP,EAAanE,IAtBlC,EAAKmB,MAAQ,CACXmD,KAAM,GACNE,MAAO,IAJG,E,sEA4BZ,OACE,kBAAChD,EAAA,EAAD,KACE,wCACA,4BACA,kBAACC,EAAA,EAAD,CAAMC,SAAUC,KAAK8C,aACnB,kBAAChD,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,UACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAK0C,QAASpE,KAAK,OAAOoC,YAAY,iBAGlE,kBAACZ,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KACd,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,WACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACR,EAAA,EAAKU,QAAN,CAAcC,SAAUT,KAAK4C,SAAUtE,KAAK,OAAOoC,YAAY,kBAGnE,4BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUtC,KAAK,UAA/B,WAEF,iC,GAjDiBwC,aAoEVC,mBAbf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,SAChBgC,YAAaxD,EAAMyD,kBAIvB,SAA4BhC,GAC1B,OAAOC,YAAmB,CACxB6B,UAAWA,GACV9B,KAGUF,CAA6C0B,G,QC3E7C,WAACS,EAAWV,EAAaW,GACtC,MAAO,CACL7E,KAAM,YACNC,QAAS,CACP2E,YACAV,cACAW,kB,SCGAC,E,YACJ,aAAe,IAAD,8BACZ,+CAKFC,eAAiB,SAACb,EAAaW,GAC7B,GAAI,EAAKG,WAAW,MACI,EAAK7D,MAAMsC,WAAWwB,iBAAiBvB,MAAM,EAAGH,OAAOW,GAAe,GAC1EA,GAAe,EAAK/C,MAAMuB,SAAS3B,sBAAuB,CAE1E,EAAKI,MAAMV,UADO,IACcyD,EAAaW,KAXrC,EAgBdK,eAAiB,SAAChB,EAAaW,GAC7B,GAAI,EAAKG,WAAW,KAAM,CAExB,EAAK7D,MAAMV,UADO,IACcyD,EAAaW,KAnBnC,EAuBdG,WAAa,SAACJ,GACZ,IAAMC,EAAetB,OAAO,EAAKpC,MAAM0D,cACjCX,EAAc,EAAK/C,MAAM+C,YACzBiB,EAAe,EAAKhE,MAAMuB,SAC1B7B,EAAmB0C,OAAO4B,EAAatE,kBACvCP,EAAiBiD,OAAO4B,EAAa7E,gBACrC8E,EAAY7B,OAAO4B,EAAapE,uBAChCsE,EAAyB,EAAKlE,MAAMuB,SAAS/B,eAC7C6C,EAAiB,YAAQ,EAAKrC,MAAMsC,WAAWD,kBAAmBE,MAAM,EAAG7C,EAAmB,IAC9FoE,EAAgB,YAAQ,EAAK9D,MAAMsC,WAAWwB,iBAAkBvB,MAAM,EAAGpD,EAAiB,IAC9E,MAAdsE,GACFpB,EAAmBqB,EAAc,KACjCI,EAAkBf,EAAa,MACR,MAAdU,GACL,EAAKzD,MAAMsC,WAAW6B,UAAUpB,GAAaW,GAAgB,IAC/DrB,EAAmBqB,EAAc,KACjCI,EAAkBf,EAAa,MAGnC,IAAMqB,EAAqB,EAAKC,mBAAmBhC,EAAmB6B,GAChEI,EAAoB,EAAKC,kBAAkBT,EAAkBG,GAGnE,OAFAO,QAAQC,IAAR,6BAAkCL,IAClCI,QAAQC,IAAR,4BAAiCH,IAC7BF,GAAsBE,GA9Cd,EAqDdD,mBAAqB,SAAChC,EAAmB6B,GACvC,IAAIQ,EAAiB,EAKrB,OAJArC,EAAkBsC,SAAQ,SAACC,GACzB,IAAMC,EAAYD,EAAQV,EACtBW,IAAWH,GAAmBR,EAAuBW,MAEpDH,GA3DK,EA8DdH,kBAAoB,SAACT,EAAkBG,GACrC,IAAIa,EAAiB,EAKrB,OAJAhB,EAAiBa,SAAQ,SAACC,GAExBE,GAAmBb,EADEW,KAGhBE,GAlEP,EAAK/E,MAAQ,GAFD,E,sEAuEJ,IAAD,OACD2D,EAAenD,KAAKP,MAAM0D,aAC1BX,EAAcxC,KAAKP,MAAM+C,YACzBmB,EAAyB3D,KAAKP,MAAMuB,SAAS/B,eAG7CuF,EAF0BxE,KAAKP,MAAMsC,WAAWD,kBAAkBqB,GACnBQ,EAClBA,EAAwB,IAE3D,OACE,yBAAKvC,UAAU,YACb,kBAACC,EAAA,EAAD,CAAMC,GAAG,SACP,kBAACD,EAAA,EAAKoD,KAAN,KACE,kBAACpD,EAAA,EAAKqD,MAAN,gBAAqBvB,GACrB,kBAAC9B,EAAA,EAAKI,KAAN,gBAAoBzB,KAAKP,MAAMsC,WAAW6B,UAAUpB,GAAaW,IACjE,4BACA,2BAAO/B,UAAU,kBAAkB9C,KAAK,SAASQ,MAAM,IAAI6F,UAAW3E,KAAKsD,WAAW,KAAMzC,QAAS,WACnG,EAAKwC,eAAeb,EAAaW,MAEnC,oCACA,2BAAO/B,UAAU,oBAAoB9C,KAAK,SAASqG,UAAW3E,KAAKsD,WAAW,KAAMxE,MAAM,IAAI+B,QAAS,WACrG,EAAK2C,eAAehB,EAAaW,QAIvC,4BACA,kBAACyB,EAAA,EAAD,CAAahE,QAAQ,SAASiE,IAAKL,S,GAjGrB1D,aAqHPC,mBAdf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,SAChBe,WAAYvC,EAAMuC,eAItB,SAA4Bd,GAC1B,OAAOC,YAAmB,CACxBxB,YAAaA,EACbX,UAAWA,GACVkC,KAGUF,CAA6CqC,GC9H7C,WAACZ,GACd,MAAO,CACLlE,KAAM,eACNC,QAAS,CACPiE,iBCMAsC,E,YACJ,aAAe,IAAD,8BACZ,+CAKFC,WAAa,SAACC,GACZ,OAAO,kBAAC,EAAD,CAAS1C,IAAK0C,EAAG7B,aAAc6B,EAAGxC,YAAa,EAAK/C,MAAM+C,eAPrD,EAUdyC,mBAAqB,SAACzC,GACpB,EAAK/C,MAAMyF,aAAa1C,IATxB,EAAKhD,MAAQ,GAFD,E,sEAsBZ,IARQ,IAAD,OACD0C,EAAc,GACd/C,EAAmB0C,OAAO7B,KAAKP,MAAMuB,SAAS7B,kBAC9CwE,EAAyB3D,KAAKP,MAAMuB,SAAS/B,eAC7CuD,EAAcxC,KAAKP,MAAM+C,YAEzB2C,EADyBnF,KAAKP,MAAMsC,WAAWwB,iBAAiBf,GACzBmB,EAAwB,IAE5DqB,EAAI,EAAGA,GAAKnD,OAAO1C,GAAmB6F,IAC7C9C,EAAYkD,KAAKpF,KAAK+E,WAAWC,IAEnC,OACE,6BACE,kBAAC3D,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,OAAN,CAAarB,GAAG,MAAhB,WAA8BF,KAAKP,MAAM+C,aACzC,4BACA,kBAACnB,EAAA,EAAKqD,MAAN,0BAA+B1E,KAAKP,MAAMuB,SAAS3B,sBAAnD,YACA,kBAACgC,EAAA,EAAKoD,KAAN,KACE,yBAAKrD,UAAU,8BACZc,IAGL,kBAAC0C,EAAA,EAAD,CAAaC,IAAKM,KAEpB,4BACA,kBAACxE,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,WACjC,EAAKoE,mBAAmBzC,KAD1B,UAGA,iC,GA3CkB1B,aA8DXC,mBAbf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,SAChBe,WAAYvC,EAAMuC,eAItB,SAA4Bd,GAC1B,OAAOC,YAAmB,CACxBgE,aAAcA,GACbjE,KAGUF,CAA6C+D,G,sDCzDtDO,E,YACJ,aAAe,IAAD,8BACZ,+CAMFC,WAAa,WAAO,IACXC,EAAc,EAAK/F,MAAnB+F,WACHA,GAAc,GAChB,EAAK5G,SAAS,CACZ4G,WAAYA,EAAa,KAXjB,EAgBdC,WAAa,WAAO,IACXD,EAAc,EAAK/F,MAAnB+F,WACHA,EAAa,GACf,EAAK5G,SAAS,CACZ4G,WAAYA,EAAa,KApBjB,EAyBd5F,YAAc,aAzBA,EA6Bd8F,QAAU,SAACC,GAAc,IAChBH,EAAc,EAAK/F,MAAnB+F,WACP,OAAmB,IAAfA,EACK,kBAAC,EAAD,CAAY/C,YAAakD,IACR,IAAfH,EACF,kBAAC,EAAD,CAAa/C,YAAakD,IAE1B,6BACL,kBAACC,EAAA,EAAD,kBACA,8BApCJ,EAAKnG,MAAQ,CACX+F,WAAY,GAHF,E,sEA2CJ,IACDA,EAAcvF,KAAKR,MAAnB+F,WACDG,EAAW1F,KAAKP,MAAMmG,MAAMC,OAAOH,SAEzC,OAAIA,GADc7D,OAAO7B,KAAKP,MAAMuB,SAASpC,gBAGzC,kBAAC,IAAD,KACE,kBAACkH,EAAA,EAAD,CAASP,WAAYA,GACnB,kBAACQ,EAAA,EAAD,CAAMzD,IAAK,GACT,kBAAC0D,EAAA,EAAD,qBAEF,kBAACD,EAAA,EAAD,CAAMzD,IAAK,GACT,kBAAC0D,EAAA,EAAD,2BAGJ,6BACGhG,KAAKyF,QAAQC,IAEhB,6BACE,kBAAC,IAAD,CACEf,SAAyB,IAAfY,EACV1E,QAASb,KAAKL,YACdiB,QAAQ,WACRqF,MAAM,WAJR,SAMA,mCACA,kBAAC,IAAD,CACEtB,SAAyB,IAAfY,EACV1E,QAASb,KAAKwF,WACd5E,QAAQ,aAHV,QAKA,mCACA,kBAAC,IAAD,CACEC,QAASb,KAAKsF,WACd1E,QAAQ,YACRqF,MAAM,WAHR,UAUJ,+F,GAtFoBnF,aAyGbC,mBAbf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,aAIpB,SAA4BC,GAC1B,OAAOC,YAAmB,CACxBxB,YAAaA,EACbX,UAAWA,GACVkC,KAGUF,CAA6CsE,GC7GtDa,E,YACJ,aAAe,IAAD,8BACZ,+CAIFC,gBAAkB,SAAC3E,GACjB,OACE,yBAAKc,IAAKd,EAAOJ,UAAU,iBACzB,kBAAC,IAAD,CAAMgF,GAAE,kBAAa5E,IAArB,UAAsCA,KAR9B,EAad6E,gBAAkB,WAEhB,IADA,IAAMC,EAAe,GACZtB,EAAI,EAAGA,GAAKnD,OAAO,EAAKpC,MAAMuB,SAASpC,gBAAiBoG,IAC/DsB,EAAalB,KAAK,EAAKe,gBAAgBnB,IAEzC,OAAOsB,GAhBP,EAAK9G,MAAQ,GAFD,E,sEAsBZ,OACE,kBAAC,IAAD,KACE,yBAAK4B,UAAU,OACb,kBAACmF,EAAA,EAAD,CAAQjF,GAAG,OAAOV,QAAQ,QACxB,kBAAC2F,EAAA,EAAOC,MAAR,eACA,kBAACC,EAAA,EAAD,CAAaC,MAAM,QAAQC,GAAG,sBAC5B,yBAAKvF,UAAU,iBACb,kBAAC,IAAD,CAAMgF,GAAI,mBAAV,aAEF,yBAAKhF,UAAU,iBACb,kBAAC,IAAD,CAAMgF,GAAI,oBAAV,uBAGJ,kBAACK,EAAA,EAAD,CAAaC,MAAM,SAASC,GAAG,sBAC5B3G,KAAKqG,oBAGV,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,kBAAkBC,UAAWtI,IAC/C,kBAAC,IAAD,CAAOoI,OAAK,EAACC,KAAK,mBAAmBC,UAAWlF,IAChD,kBAAC,IAAD,CAAOgF,OAAK,EAACC,KAAK,oBAAoBC,UAAWzB,IACjD,kC,GA3CQvE,aAyDHC,mBAPf,SAAyBvB,GACvB,MAAO,CACLwB,SAAUxB,EAAMwB,SAChBe,WAAYvC,EAAMuC,cAIPhB,CAAyBmF,GCpElCa,EACJ,CACEnI,eAAgB,EAChBK,eAAgB,EAChBE,iBAAkB,EAClBE,sBAAuB,GCLrB2H,GAAY,CAChBpD,UAAW,IAAIqD,MAAM,KAAKC,KAAK,MAAM/E,KAAI,kBAAM8E,MAAM,KAAKC,KAAK,MAC/D3E,YAAa,EACbT,kBAAmB,IAAImF,MAAM,KAAKC,KAAK,GACvC3D,iBAAkB,IAAI0D,MAAM,KAAKC,KAAK,GACtCC,iBAAkB,IAAIF,MAAM,KAAKC,MAAK,ICLlCE,GAAiB,GCWRC,GANKC,YAAgB,CAClCtG,SHEa,WAAmC,IAAlCxB,EAAiC,uDAAzBuH,EAAcQ,EAAW,uCACzCC,EAAgB,CACpB5I,eAAgB,EAChBK,eAAgB,EAChBE,iBAAkB,EAClBE,sBAAuB,GAEVoI,OAAOC,OAAO,GAAIlI,GACjC,MAAoB,gBAAhB+H,EAAOjJ,KACEiJ,EAAOhJ,QAAQF,KAED,UAAhBkJ,EAAOjJ,KACLkJ,EAGJhI,GGhBTuC,WFCa,WAAgC,IAA/BvC,EAA8B,uDAAtBwH,GAAWO,EAAW,uCACtCI,EAAa,CACjB/D,UAAW,IAAIqD,MAAM,KAAKC,KAAK,MAAM/E,KAAI,kBAAM8E,MAAM,KAAKC,KAAK,MAC/D3E,YAAa,EACbT,kBAAmB,IAAImF,MAAM,KAAKC,KAAK,GACvC3D,iBAAkB,IAAI0D,MAAM,KAAKC,KAAK,GACtCC,iBAAkB,IAAIF,MAAM,KAAKC,MAAK,IAEpCU,EAAWH,OAAOC,OAAO,GAAIlI,GACjC,GAAoB,cAAhB+H,EAAOjJ,KAAsB,CAC/B,IAAMkE,EAAcX,OAAO0F,EAAOhJ,QAAQiE,aACpCW,EAAetB,OAAO0F,EAAOhJ,QAAQ4E,cAc3C,MAbiC,MAA7BoE,EAAOhJ,QAAQ2E,WACjB0E,EAAShE,UAAUpB,GAAaW,KAChCyE,EAASrF,cACTqF,EAAS9F,kBAAkBqB,KAC3ByE,EAASrE,iBAAiBf,MACY,MAA7B+E,EAAOhJ,QAAQ2E,WACpB0E,EAAShE,UAAUpB,GAAaW,GAAgB,IAClDyE,EAAShE,UAAUpB,GAAaW,KAChCyE,EAASrF,cACTqF,EAAS9F,kBAAkBqB,KAC3ByE,EAASrE,iBAAiBf,MAGvBoF,EACF,GAAoB,iBAAhBL,EAAOjJ,KAAyB,CACzC,IAAMkE,EAAcX,OAAO0F,EAAOhJ,QAAQiE,aAE1C,OADAoF,EAAST,iBAAiB3E,IAAe,EAClCoF,EACF,MAAoB,UAAhBL,EAAOjJ,KAChBsJ,EAAWH,OAAOC,OAAO,GAAIC,GAGtBnI,GElCTwD,YDNa,WAAqC,IAApCxD,EAAmC,uDAA3B4H,GAAgBG,EAAW,uCACjD,GAAoB,cAAhBA,EAAOjJ,KAAsB,CAC/B,IAAMsJ,EAAWH,OAAOC,OAAO,GAAIlI,GAC7BgD,EAAc+E,EAAOhJ,QAAQiE,YAEnC,OADAoF,EAAS,GAAD,OAAIpF,IAAiB+E,EAAOhJ,QAAQF,KACrCuJ,EAEP,OAAOpI,KEALqI,GAAQC,YAAYC,IAE1BC,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,IACf,kBAAC,EAAD,OAEAK,SAASC,eAAe,W","file":"static/js/main.d2502267.chunk.js","sourcesContent":["export default (data) => {\n  return {\n    type: 'setSettings',\n    payload: {\n      data,\n    },\n  };\n};\n","export default () => {\n  return {\n    type: 'reset',\n  };\n};\n\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport setSettings from '../actions/setSettings';\nimport reset from '../actions/reset';\nimport {bindActionCreators} from 'redux';\n\nimport {Button, Form, Row, Col, Container} from 'react-bootstrap';\n\nclass SettingsForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberOfPeople: 0,\n      numberOfSlices: 0,\n      numberOfFlavours: 0,\n      numberOfSliceRequests: 0,\n    };\n  }\n\n  setPeople = (e) => {\n    this.setState({\n      numberOfPeople: e.target.value,\n    });\n  }\n\n  setSlices = (e) => {\n    let slices = e.target.value;\n    if (slices > 18) {\n      slices = 18;\n    }\n    // if (slices < 6) { slices = 6 }\n    this.setState({\n      numberOfSlices: slices,\n    });\n  }\n\n  setFlavours = (e) => {\n    this.setState({\n      numberOfFlavours: e.target.value,\n    });\n  }\n\n  setSliceRequests = (e) => {\n    this.setState({\n      numberOfSliceRequests: e.target.value,\n    });\n  }\n\n  storeSettings = (e) => {\n    e.preventDefault();\n    const data = this.state;\n    this.props.setSettings(data);\n  }\n\n  handleReset = (e) => {\n    this.props.reset();\n    this.setState({\n      numberOfPeople: 0,\n      numberOfSlices: 0,\n      numberOfFlavours: 0,\n      numberOfSliceRequests: 0,\n    });\n  }\n\n  render() {\n    // const settings = this.props.settings;\n    return (\n      <Container>\n        <p></p>\n        <h3>Settings</h3>\n        <p></p>\n        <Form onSubmit={this.storeSettings}>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Number of people :</Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setPeople} value={this.state.numberOfPeople} type=\"number\" placeholder=\"Enter number of people\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Number of slices in a pizza:</Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setSlices} value={this.state.numberOfSlices} type=\"number\" placeholder=\"Enter number of slices in a pizza\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Number of flavours:</Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setFlavours} value={this.state.numberOfFlavours} type=\"number\" placeholder=\"Enter number of flavours\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Maximum slice/person:</Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setSliceRequests} value={this.state.numberOfSliceRequests} type=\"number\" placeholder=\"Enter maximum slice/person\" />\n            </Col>\n          </Form.Group>\n          <p></p>\n          <Button variant=\"danger\" onClick={this.handleReset}>Reset</Button>\n          <span>  </span>\n          <Button variant=\"primary\" type=\"submit\">Submit</Button>\n        </Form>\n        <p></p>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setSettings: setSettings,\n    reset: reset,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsForm);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Card} from 'react-bootstrap';\n\nclass FlavourInfo extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"col-sm-2\">\n        <Card bg=\"light\">\n          <Card.Header as=\"h5\">Flavour {this.props.index + 1}</Card.Header>\n          <Card.Text>Pizzas to order: {this.props.pizzaValue}</Card.Text>\n          <Card.Text>Slices to order: {this.props.slicesValue}</Card.Text>\n        </Card>\n        <p></p>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n  };\n}\n\nexport default connect(mapStateToProps)(FlavourInfo);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Card, Container} from 'react-bootstrap';\nimport FlavourInfo from './FlavourInfo';\n\nclass OrderInfo extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  render() {\n    const numberOfFlavours = Number(this.props.settings.numberOfFlavours) + 1;\n    const flavourSliceCount = (this.props.orderStore.flavourSliceCount).slice(1, numberOfFlavours);\n    const slicePerPizza = Number(this.props.settings.numberOfSlices);\n    const flavourList = flavourSliceCount.map((data, index) => {\n      const pizzaValue = Math.floor(data / slicePerPizza);\n      const slicesValue = data % slicePerPizza;\n      return (\n        <FlavourInfo\n          pizzaValue={pizzaValue}\n          slicesValue={slicesValue}\n          index={index}\n          key={index}>\n        </FlavourInfo>\n      );\n    });\n    const totalSlices = this.props.orderStore.totalSlices;\n    return (\n      <Container>\n        <h3>Order Info</h3>\n        <Card>\n          <Card.Header as=\"h5\">Total Slices: {totalSlices}</Card.Header>\n          <p></p>\n          <div className=\"row justify-content-center\">\n            {flavourList}\n          </div>\n          <p></p>\n        </Card>\n        <p></p>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    orderStore: state.orderStore,\n  };\n}\n\nexport default connect(mapStateToProps)(OrderInfo);\n","export default (personIndex, data) => {\n  return {\n    type: 'setPerson',\n    payload: {\n      personIndex,\n      data,\n    },\n  };\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport setPerson from '../actions/setPerson';\nimport {bindActionCreators} from 'redux';\n\nimport {Button, Form, Row, Col, Container} from 'react-bootstrap';\n\nclass PersonForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n    };\n  }\n\n  setName = (e) => {\n    this.setState({\n      name: e.target.value,\n    });\n  }\n\n  setEmail = (e) => {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  storePerson = (e) => {\n    e.preventDefault();\n    const data = this.state;\n    const personIndex = this.props.personIndex;\n    this.props.setPerson(personIndex, data);\n  }\n\n  render() {\n    return (\n      <Container>\n        <h3>Settings</h3>\n        <p></p>\n        <Form onSubmit={this.storePerson}>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Name: </Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setName} type=\"text\" placeholder=\"Enter name\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>Eamil: </Form.Label>\n            <Col sm={9}>\n              <Form.Control onChange={this.setEmail} type=\"text\" placeholder=\"Enter email\" />\n            </Col>\n          </Form.Group>\n          <p></p>\n          <Button variant=\"primary\" type=\"submit\">Submit</Button>\n        </Form>\n        <p></p>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    personStore: state.personReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setPerson: setPerson,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonForm);\n","export default (operation, personIndex, flavourIndex) => {\n  return {\n    type: 'setSlices',\n    payload: {\n      operation,\n      personIndex,\n      flavourIndex,\n    },\n  };\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport setSettings from '../actions/setSettings';\nimport setSlices from '../actions/setSlices';\nimport {bindActionCreators} from 'redux';\nimport {ProgressBar} from 'react-bootstrap';\n\nimport {Card} from 'react-bootstrap';\n\nclass Flavour extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  incrementSlice = (personIndex, flavourIndex) => {\n    if (this.checkInput('+')) {\n      const sliceByPerson = this.props.orderStore.personSliceCount.slice(0, Number(personIndex) + 1);\n      if (sliceByPerson[personIndex] < this.props.settings.numberOfSliceRequests) {\n        const operation = '+';\n        this.props.setSlices(operation, personIndex, flavourIndex);\n      }\n    }\n  }\n\n  decrementSlice = (personIndex, flavourIndex) => {\n    if (this.checkInput('-')) {\n      const operation = '-';\n      this.props.setSlices(operation, personIndex, flavourIndex);\n    }\n  }\n\n  checkInput = (operation) => {\n    const flavourIndex = Number(this.props.flavourIndex);\n    const personIndex = this.props.personIndex;\n    const settingState = this.props.settings;\n    const numberOfFlavours = Number(settingState.numberOfFlavours);\n    const numberOfPeople = Number(settingState.numberOfPeople);\n    const maxSlices = Number(settingState.numberOfSliceRequests);\n    const numberOfSlicesPerPizza = this.props.settings.numberOfSlices;\n    const flavourSliceCount = [...(this.props.orderStore.flavourSliceCount).slice(1, numberOfFlavours + 1)];\n    const personSliceCount = [...(this.props.orderStore.personSliceCount).slice(1, numberOfPeople + 1)];\n    if (operation === '+') {\n      flavourSliceCount[(flavourIndex -1)]++;\n      personSliceCount[(personIndex -1)]++;\n    } else if (operation === '-') {\n      if (this.props.orderStore.sliceData[personIndex][flavourIndex] > 0) {\n        flavourSliceCount[(flavourIndex -1)]--;\n        personSliceCount[(personIndex -1)]--;\n      }\n    }\n    const newSliceDifference = this.getSliceDifference(flavourSliceCount, numberOfSlicesPerPizza);\n    const newPicksRemaining = this.getPicksRemaining(personSliceCount, maxSlices);\n    console.log(`NewSliceDifference:${newSliceDifference}`);\n    console.log(`NewPicksRemaining:${newPicksRemaining}`);\n    if (newSliceDifference <= newPicksRemaining) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSliceDifference = (flavourSliceCount, numberOfSlicesPerPizza) => {\n    let sliceDiffernce = 0;\n    flavourSliceCount.forEach((element) => {\n      const remainder = element%numberOfSlicesPerPizza; // Just increment or decrement element to get new slice difference\n      if (remainder) sliceDiffernce += (numberOfSlicesPerPizza-remainder);\n    });\n    return sliceDiffernce;\n  }\n\n  getPicksRemaining = (personSliceCount, maxSlices) => {\n    let picksRemaining = 0;\n    personSliceCount.forEach((element) => {\n      const slicesPicked = element;\n      picksRemaining += (maxSlices - slicesPicked);\n    });\n    return picksRemaining;\n  }\n\n  render() {\n    const flavourIndex = this.props.flavourIndex;\n    const personIndex = this.props.personIndex;\n    const numberOfSlicesPerPizza = this.props.settings.numberOfSlices;\n    const numberOfSlicesByFlavour = this.props.orderStore.flavourSliceCount[flavourIndex];\n    const flavourSliceDiff = (numberOfSlicesByFlavour) % numberOfSlicesPerPizza;\n    const progress = (flavourSliceDiff/numberOfSlicesPerPizza)*100;\n\n    return (\n      <div className=\"col-sm-2\">\n        <Card bg=\"light\">\n          <Card.Body>\n            <Card.Title>Flavour {flavourIndex}</Card.Title>\n            <Card.Text>Slices: {this.props.orderStore.sliceData[personIndex][flavourIndex]}</Card.Text>\n            <p></p>\n            <input className=\"btn btn-primary\" type=\"button\" value=\"+\" disabled={!this.checkInput('+')} onClick={() => {\n              this.incrementSlice(personIndex, flavourIndex);\n            }} />\n            <span>  </span>\n            <input className=\"btn btn-secondary\" type=\"button\" disabled={!this.checkInput('-')} value=\"-\" onClick={() => {\n              this.decrementSlice(personIndex, flavourIndex);\n            }}/>\n          </Card.Body>\n        </Card>\n        <p></p>\n        <ProgressBar variant=\"danger\" now={progress}></ProgressBar>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    orderStore: state.orderStore,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setSettings: setSettings,\n    setSlices: setSlices,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Flavour);\n","export default (personIndex) => {\n  return {\n    type: 'confirmOrder',\n    payload: {\n      personIndex,\n    },\n  };\n};\n\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Flavour from './Flavour';\nimport confirmOrder from '../actions/confirmOrder';\nimport {bindActionCreators} from 'redux';\n\nimport {Card, Button} from 'react-bootstrap';\nimport {ProgressBar} from 'react-bootstrap';\n\n\nclass PersonOrder extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  getFlavour = (i) => {\n    return <Flavour key={i} flavourIndex={i} personIndex={this.props.personIndex} />;\n  }\n\n  handleConfirmOrder = (personIndex) => {\n    this.props.confirmOrder(personIndex);\n  }\n\n  render() {\n    const flavourList = [];\n    const numberOfFlavours = Number(this.props.settings.numberOfFlavours);\n    const numberOfSlicesPerPizza = this.props.settings.numberOfSlices;\n    const personIndex = this.props.personIndex;\n    const numberOfSlicesByPerson = this.props.orderStore.personSliceCount[personIndex];\n    const yourProgress = (numberOfSlicesByPerson/numberOfSlicesPerPizza)*100;\n\n    for (let i = 1; i <= Number(numberOfFlavours); i++) {\n      flavourList.push(this.getFlavour(i));\n    }\n    return (\n      <div>\n        <Card>\n          <Card.Header as=\"h5\">Person: {this.props.personIndex}</Card.Header>\n          <p></p>\n          <Card.Title>You can pick upto {this.props.settings.numberOfSliceRequests} slices!</Card.Title>\n          <Card.Body>\n            <div className=\"row justify-content-center\">\n              {flavourList}\n            </div>\n          </Card.Body>\n          <ProgressBar now={yourProgress}></ProgressBar>\n        </Card>\n        <p></p>\n        <Button variant=\"primary\" onClick={() => {\n          this.handleConfirmOrder(personIndex);\n        }}>Submit</Button>\n        <p></p>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    orderStore: state.orderStore,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    confirmOrder: confirmOrder,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonOrder);\n","import React, {Component} from 'react';\nimport PersonForm from './PersonForm';\nimport PersonOrder from './PersonOrder';\nimport {connect} from 'react-redux';\nimport setSettings from '../actions/setSettings';\nimport setSlices from '../actions/setSlices';\nimport {bindActionCreators} from 'redux';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nclass PersonStepper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeStep: 0,\n    };\n  }\n\n  handleNext = () => {\n    const {activeStep} = this.state;\n    if (activeStep <= 1) {\n      this.setState({\n        activeStep: activeStep + 1,\n      });\n    }\n  };\n\n  handleBack = () => {\n    const {activeStep} = this.state;\n    if (activeStep > 0) {\n      this.setState({\n        activeStep: activeStep - 1,\n      });\n    }\n  };\n\n  handleReset = () => {\n\n  };\n\n  getStep = (personId) => {\n    const {activeStep} = this.state;\n    if (activeStep === 0) {\n      return <PersonForm personIndex={personId} />;\n    } else if (activeStep === 1) {\n      return <PersonOrder personIndex={personId}/>;\n    } else {\n      return <div>\n        <Typography>Thank You</Typography>\n        <p></p>\n      </div>;\n    }\n  };\n\n  render() {\n    const {activeStep} = this.state;\n    const personId = this.props.match.params.personId;\n    const maxPeople = Number(this.props.settings.numberOfPeople);\n    if (personId <= maxPeople) {\n      return (\n        <Container>\n          <Stepper activeStep={activeStep}>\n            <Step key={0}>\n              <StepLabel>Add Details</StepLabel>\n            </Step>\n            <Step key={2}>\n              <StepLabel>Place your order</StepLabel>\n            </Step>\n          </Stepper>\n          <div>\n            {this.getStep(personId)}\n          </div>\n          <div>\n            <Button\n              disabled={activeStep === 0}\n              onClick={this.handleReset}\n              variant=\"outlined\"\n              color=\"primary\"\n            >Reset</Button>\n            <span> </span>\n            <Button\n              disabled={activeStep === 0}\n              onClick={this.handleBack}\n              variant=\"contained\"\n            >Back</Button>\n            <span> </span>\n            <Button\n              onClick={this.handleNext}\n              variant=\"contained\"\n              color=\"primary\"\n            >Next</Button>\n          </div>\n        </Container>\n      );\n    } else {\n      return (\n        <h3>Sorry! You cannot place an order, please contact the admin.</h3>\n      );\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setSettings: setSettings,\n    setSlices: setSlices,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonStepper);\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Navbar, NavDropdown} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport {BrowserRouter as Router, Link, Route} from 'react-router-dom';\nimport SettingsForm from './components/SettingsForm';\nimport OrderInfo from './components/OrderInfo';\nimport PersonStepper from './components/PersonStepper';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n  getDropDownItem = (index) => {\n    return (\n      <div key={index} className=\"dropdown-item\">\n        <Link to={`/person/${index}`}>Person {index}</Link>\n      </div>\n    );\n  }\n\n  getDropDownList = () => {\n    const dropDownList = [];\n    for (let i = 1; i <= Number(this.props.settings.numberOfPeople); i++) {\n      dropDownList.push(this.getDropDownItem(i));\n    }\n    return dropDownList;\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>PizzaC</Navbar.Brand>\n            <NavDropdown title=\"Admin\" id=\"basic-nav-dropdown\">\n              <div className=\"dropdown-item\">\n                <Link to={'/admin/settings'}>Settings</Link>\n              </div>\n              <div className=\"dropdown-item\">\n                <Link to={'/admin/orderinfo'}>Order Information</Link>\n              </div>\n            </NavDropdown>\n            <NavDropdown title=\"People\" id=\"basic-nav-dropdown\">\n              {this.getDropDownList()}\n            </NavDropdown>\n          </Navbar>\n          <Route exact path=\"/admin/settings\" component={SettingsForm} />\n          <Route exact path=\"/admin/orderinfo\" component={OrderInfo} />\n          <Route exact path=\"/person/:personId\" component={PersonStepper} />\n          <p></p>\n        </div>\n      </Router>\n    );\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    settings: state.settings,\n    orderStore: state.orderStore,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","const initSettings =\n  {\n    numberOfPeople: 0,\n    numberOfSlices: 0,\n    numberOfFlavours: 0,\n    numberOfSliceRequests: 0,\n  };\n\nexport default (state = initSettings, action) => {\n  const blankSettings = {\n    numberOfPeople: 0,\n    numberOfSlices: 0,\n    numberOfFlavours: 0,\n    numberOfSliceRequests: 0,\n  };\n  let newState = Object.assign({}, state);\n  if (action.type === 'setSettings') {\n    newState = action.payload.data;\n    return newState;\n  } else if (action.type === 'reset') {\n    newState = blankSettings;\n    return newState;\n  } else {\n    return state;\n  }\n};\n","const initState = {\n  sliceData: new Array(100).fill(null).map(() => Array(100).fill(0)),\n  totalSlices: 0,\n  flavourSliceCount: new Array(100).fill(0),\n  personSliceCount: new Array(100).fill(0),\n  personOrderCheck: new Array(100).fill(false),\n};\n\nexport default (state = initState, action) => {\n  const blankState = {\n    sliceData: new Array(100).fill(null).map(() => Array(100).fill(0)),\n    totalSlices: 0,\n    flavourSliceCount: new Array(100).fill(0),\n    personSliceCount: new Array(100).fill(0),\n    personOrderCheck: new Array(100).fill(false),\n  };\n  let newState = Object.assign({}, state);\n  if (action.type === 'setSlices') {\n    const personIndex = Number(action.payload.personIndex);\n    const flavourIndex = Number(action.payload.flavourIndex);\n    if (action.payload.operation === '+') {\n      newState.sliceData[personIndex][flavourIndex]++;\n      newState.totalSlices++;\n      newState.flavourSliceCount[flavourIndex]++;\n      newState.personSliceCount[personIndex]++;\n    } else if (action.payload.operation === '-') {\n      if (newState.sliceData[personIndex][flavourIndex] > 0) {\n        newState.sliceData[personIndex][flavourIndex]--;\n        newState.totalSlices--;\n        newState.flavourSliceCount[flavourIndex]--;\n        newState.personSliceCount[personIndex]--;\n      }\n    }\n    return newState;\n  } else if (action.type === 'confirmOrder') {\n    const personIndex = Number(action.payload.personIndex);\n    newState.personOrderCheck[personIndex] = true;\n    return newState;\n  } else if (action.type === 'reset') {\n    newState = Object.assign({}, blankState);\n    return newState;\n  } else {\n    return state;\n  }\n};\n","const initPersonList = {};\n\nexport default (state = initPersonList, action) => {\n  if (action.type === 'setPerson') {\n    const newState = Object.assign({}, state);\n    const personIndex = action.payload.personIndex;\n    newState[`${personIndex}`] = action.payload.data;\n    return newState;\n  } else {\n    return state;\n  }\n};\n","import {combineReducers} from 'redux';\nimport settingsReducer from './settingsReducer';\nimport orderReducer from './orderReducer';\nimport personReducer from './personReducer'\n\nconst rootreducer = combineReducers({\n  settings: settingsReducer,\n  orderStore: orderReducer,\n  personStore: personReducer,\n});\n\nexport default rootreducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n    , document.getElementById('root'));\n"],"sourceRoot":""}